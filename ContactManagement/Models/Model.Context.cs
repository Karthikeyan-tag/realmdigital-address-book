//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContactManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AddressBookEntities : DbContext
    {
        public AddressBookEntities()
            : base("name=AddressBookEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ContactEmail> ContactEmails { get; set; }
        public virtual DbSet<ContactMobile> ContactMobiles { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
    
        public virtual ObjectResult<string> sp_AddUpdateDeleteContact(Nullable<int> contactId, string firstName, string lastName, string mobileNumber, string emailAddress, string type)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_AddUpdateDeleteContact", contactIdParameter, firstNameParameter, lastNameParameter, mobileNumberParameter, emailAddressParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetAllContacts_Result> sp_GetAllContacts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllContacts_Result>("sp_GetAllContacts");
        }
    
        public virtual ObjectResult<sp_GetContactById_Result> sp_GetContactById(Nullable<int> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetContactById_Result>("sp_GetContactById", contactIdParameter);
        }
    }
}
